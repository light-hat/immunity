# Generated by Django 5.2.4 on 2025-08-03 16:19

import api.models.agent
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='IastAgent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(blank=True, max_length=255)),
                ('version', models.CharField(blank=True, max_length=255)),
                ('latest_time', models.IntegerField()),
                ('is_audit', models.IntegerField()),
                ('is_running', models.IntegerField()),
                ('is_core_running', models.IntegerField()),
                ('control', models.IntegerField()),
                ('is_control', models.IntegerField()),
                ('project_name', models.CharField(blank=True, max_length=255)),
                ('online', models.PositiveSmallIntegerField(default=0)),
                ('language', models.CharField(blank=True, max_length=10)),
                ('filepathsimhash', models.CharField(blank=True, max_length=255)),
                ('servicetype', models.CharField(blank=True, max_length=255)),
                ('alias', models.CharField(blank=True, max_length=255)),
                ('startup_time', models.IntegerField(default=0)),
                ('register_time', models.IntegerField(default=0)),
                ('actual_running_status', models.IntegerField(default=1)),
                ('except_running_status', models.IntegerField(default=1)),
                ('state_status', models.IntegerField(default=1)),
                ('events', models.JSONField(default=api.models.agent.get_events)),
                ('allow_report', models.IntegerField(default=1)),
            ],
            options={
                'db_table': 'iast_agent',
            },
        ),
        migrations.CreateModel(
            name='IastServer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostname', models.CharField(blank=True, max_length=255)),
                ('ip', models.CharField(blank=True, max_length=255)),
                ('port', models.IntegerField()),
                ('environment', models.TextField(blank=True, null=True)),
                ('path', models.CharField(blank=True, max_length=255)),
                ('status', models.CharField(blank=True, max_length=255)),
                ('container', models.CharField(blank=True, max_length=255)),
                ('container_path', models.CharField(blank=True, max_length=255)),
                ('cluster_name', models.CharField(blank=True, max_length=255)),
                ('cluster_version', models.CharField(blank=True, max_length=100)),
                ('command', models.TextField(blank=True)),
                ('env', models.CharField(blank=True, max_length=255)),
                ('runtime', models.CharField(blank=True, max_length=255)),
                ('create_time', models.IntegerField()),
                ('update_time', models.IntegerField()),
                ('network', models.CharField(blank=True, max_length=255)),
                ('protocol', models.CharField(blank=True, max_length=255)),
                ('pid', models.IntegerField(blank=True)),
                ('ipaddresslist', models.JSONField(default=list)),
            ],
            options={
                'db_table': 'iast_server',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('preferences', models.JSONField(blank=True, default=dict)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('avatar', models.URLField(blank=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='IastAgentEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('time', models.IntegerField(blank=True, default=1754237945, null=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='new_events', to='api.iastagent')),
            ],
            options={
                'db_table': 'iast_agent_event',
            },
        ),
        migrations.AddField(
            model_name='iastagent',
            name='server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='agents', related_query_name='agent', to='api.iastserver', verbose_name='server'),
        ),
    ]
