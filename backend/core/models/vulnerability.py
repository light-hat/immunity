import os.path
import uuid

from core.models.agent import IastAgent
from core.models.hook_type import HookType
from core.models.project import IastProject
from core.models.project_version import IastProjectVersion
from core.models.server import IastServer
from core.models.strategy import IastStrategyModel
from core.models.vul_level import IastVulLevel
from django.db import models


class IastVulnerabilityStatus(models.Model):
    name = models.CharField(max_length=100, blank=True)

    class Meta:
        db_table = "iast_vulnerability_status"


class IastVulnerabilityModel(models.Model):
    id = models.BigAutoField(primary_key=True)
    search_keywords = models.CharField(max_length=1000, blank=True)
    level = models.ForeignKey(IastVulLevel, models.DO_NOTHING, blank=True)
    url = models.CharField(max_length=2000, blank=True)
    uri = models.CharField(max_length=255, blank=True)
    pattern_uri = models.CharField(max_length=255, blank=True, default="")

    vul_title = models.CharField(max_length=255, blank=True, default="")
    http_method = models.CharField(max_length=10, blank=True)
    http_scheme = models.CharField(max_length=255, blank=True)
    http_protocol = models.CharField(max_length=255, blank=True)
    req_header = models.TextField(blank=True)
    req_params = models.CharField(max_length=2000, blank=True, default="")
    req_data = models.TextField(blank=True)
    res_header = models.TextField(blank=True)
    res_body = models.TextField(blank=True)
    full_stack = models.TextField(blank=True, default="")
    top_stack = models.CharField(max_length=255, blank=True, default="")
    bottom_stack = models.CharField(max_length=255, blank=True, default="")
    taint_value = models.CharField(max_length=4000, blank=True, default="")
    taint_position = models.CharField(max_length=255, blank=True, default="")
    agent = models.ForeignKey(IastAgent, models.DO_NOTHING, blank=True)
    language = models.CharField(max_length=10, blank=True, default="")
    context_path = models.CharField(max_length=255, blank=True)
    counts = models.IntegerField(blank=True)
    first_time = models.IntegerField(blank=True)
    latest_time = models.IntegerField(blank=True)
    latest_time_desc = models.IntegerField(blank=True, default=0)
    level_id_desc = models.SmallIntegerField(blank=True, default=0)
    client_ip = models.CharField(max_length=255, blank=True)
    param_name = models.CharField(max_length=255, blank=True, default="")
    is_del = models.SmallIntegerField(blank=True, default=0)
    method_pool_id = models.IntegerField(default=-1, blank=True)
    strategy = models.ForeignKey(
        IastStrategyModel,
        on_delete=models.DO_NOTHING,
        db_constraint=False,
        db_column="strategy_id",
    )
    hook_type = models.ForeignKey(
        HookType,
        on_delete=models.DO_NOTHING,
        db_constraint=False,
        db_column="hook_type_id",
    )
    status = models.ForeignKey(
        IastVulnerabilityStatus,
        on_delete=models.DO_NOTHING,
        db_constraint=False,
        db_column="status_id",
        null=True,
    )
    project = models.ForeignKey(
        IastProject, on_delete=models.CASCADE, blank=True, default=-1
    )
    project_version = models.ForeignKey(
        IastProjectVersion, on_delete=models.CASCADE, blank=True, default=-1
    )
    server = models.ForeignKey(
        IastServer, on_delete=models.CASCADE, blank=True, default=-1
    )

    class Meta:
        db_table = "iast_vulnerability"
        indexes = [
            models.Index(
                fields=(
                    "http_method",
                    "param_name",
                    "pattern_uri",
                    "project_id",
                    "status_id",
                    "strategy_id",
                )
            ),
        ]

    def save(self, *args, **kwargs):
        key_works = [
            # self.uri,
            # self.http_method,
            # self.http_scheme,
            # self.http_protocol,
            # self.top_stack,
            # self.bottom_stack,
            self.strategy.vul_type,
            self.strategy.vul_name,
        ]
        if not self.pattern_uri:
            self.pattern_uri = self.pattern_uri
        self.search_keywords = " ".join(key_works)
        try:
            self.latest_time_desc = -int(self.latest_time)
            self.level_id_desc = -int(self.level_id)
        except TypeError as e:
            logger.exception(
                "level_id: {self.level_id} latest_time: {self.latest_time}", exc_info=e
            )
        super().save(*args, **kwargs)
